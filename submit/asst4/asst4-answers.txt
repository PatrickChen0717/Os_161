1.What are the ELF magic numbers?

    It is the starting binary of an ELF executable.
    It's used to indicate the binary is well-formed. So that exec function can execute the binary instructions.

2.What is the difference between UIO_USERISPACE and UIO_USERSPACE? When should one use UIO_SYSSPACE instead?

    They are flags to indicate binary data. So that kernel knows if those binary are executable instructions.
    UIO_USERISPACE indicates that user code
    UIO_USERSPACE indicates user data

3.Why can the struct uio that is used to read in a segment be allocated on the stack in load_segment() (i.e., where does the memory read actually go)?



4.In runprogram(), why is it important to call vfs_close() before going to usermode?


If vfs_close() is not called, the process will hold that file, so that the later process can not open that file again. 
If vfs_close() is not called, keeps opening files without closing them, the file table will run out of available entries. So that no more file can be opened eventually.

5.What function forces the processor to switch into usermode? Is this function machine dependent?

6.In what file are copyin and copyout defined? memmove? Why can't copyin and copyout be implemented as simply as memmove?

7.What (briefly) is the purpose of userptr_t?

8.What is the numerical value of the exception code for a MIPS system call?

9.How many bytes is an instruction in MIPS? (Answer this by reading syscall() carefully, not by looking somewhere else.)

10.Why do you "probably want to change" the implementation of kill_curthread()?

11.What would be required to implement a system call that took more than 4 arguments?

12.What is the purpose of the SYSCALL macro?

It fills register v0 with with the syscall code and jump to the common code at __syscall.

13.What is the MIPS instruction that actually triggers a system call? (Answer this by reading the source in this directory, not looking somewhere else.)

14.After reading syscalls-mips.S and syscall.c, you should be prepared to answer the following question: 
OS/161 supports 64-bit values; lseek() takes and returns a 64-bit offset value. 
Thus, lseek() takes a 32-bit file handle (arg0), a 64-bit offset (arg1), a 32-bit whence (arg2), and needs to return a 64-bit offset value. 
In void syscall(struct trapframe *tf) where will you find each of the three arguments (in which registers) and how will you return the 64-bit offset?


15.As you were reading the code in runprogram.c and loadelf.c, you probably noticed how the kernel manipulates the files. 
Which kernel function is called to open a file? 
Which macro is called to read the file? What about to write a file? 
Which data structure is used in the kernel to represent an open file? 

16.What is the purpose of VOP_INCREF and VOP_DECREF?